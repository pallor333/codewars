{\rtf1\ansi\deff3\adeflang1025
{\fonttbl{\f0\froman\fprq2\fcharset0 Times New Roman;}{\f1\froman\fprq2\fcharset2 Symbol;}{\f2\fswiss\fprq2\fcharset0 Arial;}{\f3\froman\fprq2\fcharset128 Times New Roman;}{\f4\fnil\fprq0\fcharset128 OpenSymbol{\*\falt Arial Unicode MS};}{\f5\fmodern\fprq1\fcharset128 Courier New;}{\f6\fswiss\fprq2\fcharset128 Arial;}{\f7\fnil\fprq2\fcharset128 SimSun;}{\f8\fswiss\fprq0\fcharset128 Arial;}{\f9\froman\fprq0\fcharset128 ;}{\f10\fmodern\fprq1\fcharset128 NSimSun;}{\f11\fnil\fprq2\fcharset128 Microsoft YaHei;}}
{\colortbl;\red0\green0\blue0;\red0\green0\blue128;\red128\green128\blue128;}
{\stylesheet{\s0\snext0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033 Default;}
{\s2\sbasedon38\snext39\ilvl1\outlinelevel1{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa120\keepn\cf0\b\hich\af7\langfe2052\dbch\af6\ab\loch\f3\fs36\lang1033 Heading 2;}
{\s3\sbasedon38\snext39\ilvl2\outlinelevel2{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa120\keepn\cf0\b\hich\af7\langfe2052\dbch\af6\ab\loch\f3\fs28\lang1033 Heading 3;}
{\*\cs15\snext15 RTF_Num 2 1;}
{\*\cs16\snext16 RTF_Num 2 2;}
{\*\cs17\snext17 RTF_Num 2 3;}
{\*\cs18\snext18 RTF_Num 2 4;}
{\*\cs19\snext19 RTF_Num 2 5;}
{\*\cs20\snext20 RTF_Num 2 6;}
{\*\cs21\snext21 RTF_Num 2 7;}
{\*\cs22\snext22 RTF_Num 2 8;}
{\*\cs23\snext23 RTF_Num 2 9;}
{\*\cs24\snext24\hich\af4\dbch\af4\loch\f4 RTF_Num 3 1;}
{\*\cs25\snext25\hich\af4\dbch\af4\loch\f4 RTF_Num 3 2;}
{\*\cs26\snext26\hich\af4\dbch\af4\loch\f4 RTF_Num 3 3;}
{\*\cs27\snext27\hich\af4\dbch\af4\loch\f4 RTF_Num 3 4;}
{\*\cs28\snext28\hich\af4\dbch\af4\loch\f4 RTF_Num 3 5;}
{\*\cs29\snext29\hich\af4\dbch\af4\loch\f4 RTF_Num 3 6;}
{\*\cs30\snext30\hich\af4\dbch\af4\loch\f4 RTF_Num 3 7;}
{\*\cs31\snext31\hich\af4\dbch\af4\loch\f4 RTF_Num 3 8;}
{\*\cs32\snext32\hich\af4\dbch\af4\loch\f4 RTF_Num 3 9;}
{\*\cs33\snext33\hich\af5\dbch\af10\loch\f5 Source Text;}
{\*\cs34\snext34\b\ab Strong Emphasis;}
{\*\cs35\snext35\cf2\ul\ulc0\langfe255\lang255 Internet Link;}
{\*\cs36\snext36\hich\af4\dbch\af4\loch\f4 Bullets;}
{\*\cs37\snext37\i\ai Emphasis;}
{\s38\sbasedon0\snext39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa120\keepn\cf0\hich\af6\langfe2052\dbch\af11\loch\f6\fs28\lang1033 Heading;}
{\s39\sbasedon0\snext39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033 Text body;}
{\s40\sbasedon39\snext40{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af8\langfe2052\dbch\af3\loch\f3\fs24\lang1033 List;}
{\s41\sbasedon0\snext41{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb120\sa120\cf0\i\hich\af8\langfe2052\dbch\af3\ai\loch\f3\fs24\lang1033 Caption;}
{\s42\sbasedon0\snext42{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\cf0\hich\af8\langfe2052\dbch\af3\loch\f3\fs24\lang1033 Index;}
{\s43\sbasedon0\snext43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033 Preformatted Text;}
{\s44\sbasedon0\snext44{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\li567\ri567\lin567\rin567\fi0\sb0\sa283\cf0\hich\af6\langfe2052\dbch\af9\loch\f3\fs24\lang1033 Quotations;}
}{\*\listtable{\list\listtemplateid1
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-432\li432}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-576\li576}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-720\li720}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-864\li864}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1008\li1008}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1152\li1152}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1296\li1296}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1440\li1440}
{\listlevel\levelnfc0\leveljc0\levelstartat1\levelfollow0{\leveltext \'00;}{\levelnumbers;}\fi-1584\li1584}\listid1}
{\list\listtemplateid2
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li720}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li1080}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li1440}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li1800}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li2160}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li2520}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li2880}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li3240}
{\listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f4\dbch\af4\fi-360\li3600}\listid2}
}{\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}{\info{\creatim\yr0\mo0\dy0\hr0\min0}{\revtim\yr0\mo0\dy0\hr0\min0}{\printim\yr0\mo0\dy0\hr0\min0}{\comment OpenOffice}{\vern4170}}\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709\deftab709

{\*\pgdsctbl
{\pgdsc0\pgdscuse195\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\pgdscnxt0 Default;}}
\formshade{\*\pgdscno0}\paperh15840\paperw12240\margl1800\margr1800\margt1440\margb1440\sectd\sbknone\sectunlocked1\pgndec\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ftnbj\ftnstart1\ftnrstcont\ftnnar\aenddoc\aftnrstcont\aftnstart1\aftnnrlc
\pgndec\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Complete the function that accepts a string parameter, and reverses each word in the string. All spaces in the string should be retained.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Examples}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
"This is an example!" ==> "sihT si na !elpmaxe"}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
"double  spaces"      ==> "elbuod  secaps"}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
function reverseWords(str) \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
return str.split(' ').map((word)=> \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
    }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
return word.split('').reverse().join('');}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}).join(' ');}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
- str.split(' ') creates an array based on splitting based on each space. "The quick brown fox jumped over the moon." turns into ["The", "quick", "brown", "fox", "jumped", "over", "the", "moon."]}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
- Map allows us to call a function on each element of the newly formed array. Then on each word in the array, we split by letter, with split(''), reverse the order in the arrays with reverse() and then join the letters back into words with join(''). Finally we add a .join(' ') method after the map() to combine every word in the array into a string, adding a space after each word.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__4_2036878073}{\*\bkmkend __DdeLink__4_2036878073}\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
You might know some pretty large perfect squares. But what about the NEXT one?}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
If the argument is itself not a perfect square then return either -1 or an empty value like None or null, depending on your language. You may assume the argument is non-negative.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Examples ( Input --> Output )}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
121 --> 144}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
625 --> 676}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
114 --> -1  #  because 114 is not a perfect square}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
function findNextSquare(sq) \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
return Math.sqrt(sq)%1? -1 : Math.pow(Math.sqrt(sq)+1,2);}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Math(sq)%1 is truthy/falsy. When it's not an integer it equals some number (e.g. 32.4893), which is truthy. When it is an integer the remainder is 0 which is falsy. Overall an elegant way to solve this problem. The only issue is that we're calling math.sqrt() twice. Is it more efficient to declare a variable to use?}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Given an array with exactly 5 strings "a", "b" or "c" (chars in Java, characters in Fortran, Chars in Haskell), check if the array contains three and two of the same values.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Examples}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
["a", "a", "a", "b", "b"] ==> true  // 3x "a" and 2x "b"}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
["a", "b", "c", "b", "c"] ==> false // 1x "a", 2x "b" and 2x "c"}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
["a", "a", "a", "a", "a"] ==> false // 5x "a"}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function checkThreeAndTwo(array) \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
let as = array.filter(x => x === 'a').length;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
let bs = array.filter(x => x === 'b').length;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
let cs = array.filter(x => x === 'c').length;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return (as === 3 || bs === 3 || cs=== 3)  }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
          }{\rtlch \ltrch\loch
&& (as === 2 || bs === 2 || cs === 2);}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer 2: }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function checkThreeAndTwo(array) \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
const counts = array.reduce((result, letter) => \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
if (result[letter]) \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
result[letter]++;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\} else \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
      }{\rtlch \ltrch\loch
result[letter] = 1;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return result;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}, \{\});}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
const containsThree = Object.values(counts).some(x => x === 3);}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
const containsTwo = Object.values(counts).some(x => x === 2);}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return containsThree && containsTwo;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Return the number (count) of vowels in the given string.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
We will consider a, e, i, o, u as vowels for this Kata (but not y).}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
The input string will only consist of lower case letters and/or spaces.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function getCount(str) \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return str.split('').filter(c => "}{{\*\bkmkstart __DdeLink__5_1016976453}\rtlch \ltrch\loch
aeiouAEIOU}{{\*\bkmkend __DdeLink__5_1016976453}\rtlch \ltrch\loch
".includes(c)).length;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
str.split('') turns the string into an array with each char being a separate element. Filter() creates a shallow copy of the larger array based on the function given after the arrow function. The logic in the function uses .includes(), a string method in order to check if the single character taken from the [string turned array] is in the specified string \'81\'67 aeiouAEIOU\'81\'68. If it is found, then that character is added to the temporary array. Once everything is filtered, the length property is accessed, returning back the total number of values in the array, thus giving you the number of vowels in the string.}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Trolls are attacking your comment section!}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
A common way to deal with this situation is to remove all of the vowels from the trolls' comments, neutralizing the threat.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Your task is to write a function that takes a string and return a new string with all vowels removed.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
For example, the string "This website is for losers LOL!" would become "Ths wbst s fr lsrs LL!".}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Note: for this kata y isn't considered a vowel.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function disemvowel(str) \{}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return str.replace(/[aeiou]/gi, '');}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/o/gi is a regular expression where forward slashes /. delimit the start and end of the regex pattern, 'o' is the character to match, 'g' (global) flag tells the regex engine to search the entire string rather than stopping at the first match and the I (case-insensitive) makes it case insensitive, ensuring that all characters of either case will be targeted. When targeting multiple characters with the regex, one uses a character set denoted by square brackets []. }
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Create a function with two arguments that will return an array of the first n multiples of x.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Assume both the given number and the number of times to count will be positive numbers greater than 0.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Return the results as an array or list ( depending on language ).}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Examples}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
countBy(1,10) === [1,2,3,4,5,6,7,8,9,10]}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
countBy(2,5) === [2,4,6,8,10]}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
const countBy = (x, n) => Array.from(\{length: n\}, (v, k) => (k + 1) * x)}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
The \{length: n\} creates an array with n-amount of undefined values.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
After that (v, k) => (k + 1) * x adds values in this array.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
const countBy = (x, n) => Array.from(\{}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
length: n // Create n indexes with undefined values}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\},}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function(v, k) \{ // Run a map function on said indexes using v(alue)[undefined] and k(ey)[0 to n]}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return (k + 1) * x; // Return k(ey) as value for this index}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
);}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
console.log(countBy(1, 10));}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__213_2128588992}{\*\bkmkend __DdeLink__213_2128588992}\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Make a program that filters a list of strings and returns a list with only your friends name in it.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
If a name has exactly 4 letters in it, you can be sure that it has to be a friend of yours! Otherwise, you can be sure he's not...}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
Input = \{"Ryan", "Kieran", "Jason", "Yous"\}}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
Output = \{"Ryan", "Yous"\}}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
Input = \{"Peter", "Stephen", "Joe"\}}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
Output = \{\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer: }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function friend(friends)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return friends.filter(n => n.length === 4)}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Given a list of integers, determine whether the sum of its elements is odd or even.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Give your answer as a string matching "odd" or "even".}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
If the input array is empty consider it as: [0] (array with a zero).}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Examples:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Input: [0]}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Output: "even"}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Input: [0, 1, 4]}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Output: "odd"}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Input: [0, -1, -5]}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Output: "even"}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function oddOrEven(arr) \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr.reduce( (sum,n)=>sum+n,0) % 2 ? \'81\'67odd\'81\'68 : \'81\'67even\'81\'68;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
This works because in JS 1 is considered true while 0 is considered false. 5 % 2 = 1 = true which triggers the left condition in the [condition]]? [true] : [false] statement. 0 is considered false}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__3_429765998}{\*\bkmkend __DdeLink__3_429765998}\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Implement a function which takes a number N and returns the N'th row of the sequence below. If the argument is greater than the number of rows in the sequence, then start from the beginning again, e.g. row 27 is the same as row 1.}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
1:  ABCDEFGHIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
2:  BBCDEFGHIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
3:  CCCDEFGHIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
4:  DDDDEFGHIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
5:  EEEEEFGHIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
6:  FFFFFFGHIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
7:  GGGGGGGHIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
8:  HHHHHHHHIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
9:  IIIIIIIIIJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
10: JJJJJJJJJJKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
11: KKKKKKKKKKKLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
12: LLLLLLLLLLLLMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
13: MMMMMMMMMMMMMNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
14: NNNNNNNNNNNNNNOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
15: OOOOOOOOOOOOOOOPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
16: PPPPPPPPPPPPPPPPQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
17: QQQQQQQQQQQQQQQQQRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
18: RRRRRRRRRRRRRRRRRRSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
19: SSSSSSSSSSSSSSSSSSSTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
20: TTTTTTTTTTTTTTTTTTTTUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
21: UUUUUUUUUUUUUUUUUUUUUVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
22: VVVVVVVVVVVVVVVVVVVVVVWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
23: WWWWWWWWWWWWWWWWWWWWWWWXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
24: XXXXXXXXXXXXXXXXXXXXXXXXYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
25: YYYYYYYYYYYYYYYYYYYYYYYYYZ}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
26: ZZZZZZZZZZZZZZZZZZZZZZZZZZ}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
const rows = \{}{\rtlch \ltrch\loch
(rows from above, i'm saving space)\}}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
function getRow(n) \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
return rows[(n - 1) % 26 + 1];}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
You probably know the "like" system from Facebook and other pages. People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Implement the function which takes an array containing the names of people that like an item. It must return the display text as shown in the examples:}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
[]                                -->  "no one likes this"}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
["Peter"]                         -->  "Peter likes this"}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
["Jacob", "Alex"]                 -->  "Jacob and Alex like this"}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
["Max", "John", "Mark"]           -->  "Max, John and Mark like this"}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
["Alex", "Jacob", "Mark", "Max"]  -->  "Alex, Jacob and 2 others like this"}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Note: For 4 or more names, the number in }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
"and 2 others"}{\rtlch \ltrch\loch
 simply increases.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
function likes(names) \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
return \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
    }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
0: 'no one likes this',}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
    }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
1: `$\{names[0]\} likes this`, }
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
    }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
2: `$\{names[0]\} and $\{names[1]\} like this`, }
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
    }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
3: `$\{names[0]\}, $\{names[1]\} and $\{names[2]\} like this`, }
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
    }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
4: `$\{names[0]\}, $\{names[1]\} and $\{names.length - 2\} others like this`, }
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}[Math.min(4, names.length)]}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Your task is to write function factorial.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
const factorial = n => n ? factorial(n - 1) * n : 1;}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
My Answer:}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
function factorial(n) \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
        }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
let product = 1}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
for (let i = 2; i <= n; i++) \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
        }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
product *= i}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
return product}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\rtlch \ltrch\loch
}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__4_562682089}{\*\bkmkend __DdeLink__4_562682089}\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Your task is to make two functions ( max and min, or maximum and minimum, etc., depending on the language ) that receive a list of integers as input, and return the largest and lowest number in that list, respectively. Each function returns one number.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Examples (Input -> Output)}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
* [4,6,2,1,9,63,-134,566]         -> max = 566, min = -134}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
* [-52, 56, 30, 29, -54, 0, -110] -> min = -110, max = 56}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
* [42, 54, 65, 87, 0]             -> min = 0, max = 87}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\listtext\pard\plain \hich\af4\dbch\af4\loch\f4 \'95\tab}\ilvl0\ls2 \li0\ri0\lin0\rin0\fi-360\tx720\li720\ri0\lin720\rin0\fi-360{\rtlch \ltrch\loch
[5]                             -> min = 5, max = 5}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
const min = (list) => Math.min(...list);}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
const max = (list) => Math.max(...list);}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
\'81\'63 }{\rtlch \ltrch\loch
is the spread operator. It takes all the values in the array and 'spreads' them out as arguments to the function. Math.max/min require individual numbers as arguments so you can't just pass in the array itself. Math.max(...[1,2,3]) becomes Math.max(1,2,3).}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer 2:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
const min = list => list.reduce((a, b) => a < b ? a : b)}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
const max = list => list.reduce((a, b) => a > b ? a : b)}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
My Answer:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
var min = function(list)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
list.sort((a, b) => a - b );}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return list[0];}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
var max = function(list)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
list.sort((a, b) => b - a );}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return list[0];}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
It should remove all values from list a, which are present in list b keeping their order.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
arrayDiff([1,2],[1]) == [2]}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
If a value is present in b, all of its occurrences must be removed from the other:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
arrayDiff([1,2,2,2,3],[2]) == [1,3]}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function arrayDiff(a, b) \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
if(b.length === 0 || a.length === 0)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return a;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return a.filter(num => !b.includes(num));}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer 2:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function array_diff(a, b) \{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
b = new Set(b)}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return a.filter(v => !b.has(v))}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
The more optimal solution. Array.includes searches in O(n) linear time complexity and is called once for every element in a. So the overall time complexity of linear traversal over a with linear search within b is O(a * b). Whereas, creating the set of b is linear, but is only done once. So traversing a in linear time with constant time search results in O(a * O(1) + b) == O(a + b) time complexity.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Your task is to make a function that can take any non-negative integer as an argument and return it with its digits in descending order. Essentially, rearrange the digits to create the highest possible number.}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s3\ilvl2\outlinelevel2{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa120\keepn\cf0\b\hich\af7\langfe2052\dbch\af6\ab\loch\f3\fs28\lang1033{{\*\bkmkstart examples}{\*\bkmkend examples}\rtlch \ltrch\loch
Examples:}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Input: }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
42145}{\rtlch \ltrch\loch
 Output: }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
54421}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Input: }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
145263}{\rtlch \ltrch\loch
 Output: }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
654321}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Input: }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
123456789}{\rtlch \ltrch\loch
 Output: }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
987654321}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function descendingOrder(n)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return Number(String(n).split('').sort().reverse().join(''))}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
HIGH LEVEL SUMMARY}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
To return numbers in descending order.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Convert number to string, and then string to an array, because we need to use methods of array.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
String(n) to convert our input into a string, so that we can use split.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
.split('') so that we can convert our string into an array with individual characters}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
.sort() to rearrange our string characters from lowest to highest.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
.reverse() to flip our arrangement to highest to lowest.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
.join('') to convert our array back into a string, so that we can use parseInt()}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
parseInt() on the outside will convert our joined string into a number}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__6_188889446}{\*\bkmkend __DdeLink__6_188889446}\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
For example:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
uniqueInOrder('AAAABBBCCDAABBB') == ['A', 'B', 'C', 'D', 'A', 'B']}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
uniqueInOrder('ABBCcAD')         == ['A', 'B', 'C', 'c', 'A', 'D']}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
uniqueInOrder([1,2,2,3,3])       == [1,2,3]}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Implement the function unique_in_order which takes as argument a sequence and returns a list of items without any elements with the same value next to each other and preserving the original order of elements.}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
For example:}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
var uniqueInOrder=function(iterable)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
let arr = [];}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
for(let i = 0; i < iterable.length; i++)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
(iterable[i] !== iterable[i + 1]) && arr.push(iterable[i]);}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return arr;}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
The logical && operator used to conditionally perform an action without needing an explicit "else" part. The condition is evaluated first, and if it's true, the }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
arr.push()}{\rtlch \ltrch\loch
 method is called; if false, it simply does nothing. This is commonly used in JavaScript when you only want to execute something conditionally without needing an "else" case. }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
var uniqueInOrder=function(iterable)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
    }{\rtlch \ltrch\loch
return [...iterable].filter((a, i) => a !== iterable[i-1])}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
[...iterable] creates a shallow array}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
filter(a, i) creates a new array that only includes elements where a isn't equal to the previous element}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__12_947086247}{\*\bkmkend __DdeLink__12_947086247}\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
The first century spans from the }{\*\cs34\b\ab\rtlch \ltrch\loch
year 1}{\rtlch \ltrch\loch
 up to }{\*\cs37\i\ai\rtlch \ltrch\loch
and including}{\rtlch \ltrch\loch
 the year 100, the second century - from the year 101 up to }{\*\cs37\i\ai\rtlch \ltrch\loch
and including}{\rtlch \ltrch\loch
 the year 200, etc.}
\par \pard\plain \s3\ilvl2\outlinelevel2{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa120\keepn\cf0\b\hich\af7\langfe2052\dbch\af6\ab\loch\f3\fs28\lang1033{{\*\bkmkstart task}{\*\bkmkend task}\rtlch \ltrch\loch
Task}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Given a year, return the century it is in.}
\par \pard\plain \s3\ilvl2\outlinelevel2{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb240\sa120\keepn\cf0\b\hich\af7\langfe2052\dbch\af6\ab\loch\f3\fs28\lang1033{{\*\bkmkstart examples1}{\*\bkmkend examples1}\rtlch \ltrch\loch
Examples}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
1705 --> 18}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
1900 --> 19}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
1601 --> 17}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
2000 --> 20}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
2742 --> 28}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer:}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
function century(year) \{}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch
  }{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
return Math.ceil(year/100); //using ceiling method to round up to nearest century (100)}
\par \pard\plain \s43{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa0\cf0\hich\af5\langfe2052\dbch\af10\loch\f5\fs20\lang1033\sb0\sa283{\*\cs33\hich\af5\dbch\af10\loch\f5\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{{\*\bkmkstart __DdeLink__11_889319276}\rtlch \ltrch\loch{\*\bkmkend __DdeLink__11_889319276}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Deoxyribonucleic acid, DNA is the primary information storage molecule in biological systems. It is composed of four nucleic acid bases Guanine ('G'), Cytosine ('C'), Adenine ('A'), and Thymine ('T').}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Ribonucleic acid, RNA, is the primary messenger molecule in cells. RNA differs slightly from DNA its chemical structure and contains no Thymine. In RNA Thymine is replaced by another nucleic acid Uracil ('U').}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Create a function which translates a given DNA string into RNA.}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
For example:}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
"GCAT"  =>  "GCAU"}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
The input string can be of arbitrary length - in particular, it may be empty. All input is guaranteed to be valid, i.e. each input string will only ever consist of 'G', 'C', 'A' and/or 'T'.}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\ltrsect\sbknone\pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
Answer: }
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
function DNAtoRNA(dna)\{}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch
  }{\rtlch \ltrch\loch
return dna.replace(/T/g, 'U');}
\par \pard\plain \s0{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\nowidctlpar\cf0\hich\af6\langfe2052\dbch\af9\afs24\lang1081\loch\f3\fs24\lang1033{\rtlch \ltrch\loch
\}}
\par \pard\plain \s39{\*\hyphen2\hyphlead2\hyphtrail2\hyphmax0}\sb0\sa120\cf0\hich\af3\langfe2052\dbch\af3\loch\f3\fs24\lang1033\sb0\sa120{\rtlch \ltrch\loch
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////}
\par \sect\sectd\sectunlocked1\pgwsxn12240\pghsxn15840\marglsxn1800\margrsxn1800\margtsxn1440\margbsxn1440\pgndec\sbknone}